{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory'\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao'\r\nimport {Negociacao} from '../models/Negociacao' \r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto =>\r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                }).catch(erro => {\r\n                    console.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana\");\r\n                });\r\n\r\n        });\r\n    }\r\n\r\n    /*    ANTES\r\n\r\n    let xhr = new XMLHttpRequest();\r\n      xhr.open('GET', 'negociacoes/semana');\r\n      xhr.onreadystatechange = () => {\r\n        if(xhr.readyState == 4) {\r\n            if(xhr.status == 200) {\r\n \r\n              resolve(JSON.parse(xhr.responseText)\r\n                    .map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n \r\n            } else {\r\n                console.log(xhr.responseText);\r\n                reject('Não foi possível obter as negociações da semana');\r\n \r\n            }\r\n          }\r\n      };\r\n      xhr.send();*/\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto =>\r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                }).catch(erro => {\r\n                    console.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana anterior\");\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto =>\r\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n\r\n                }).catch(erro => {\r\n                    console.log(erro);\r\n                    reject(\"Não foi possivel obter as negociações da semana retrasada\");\r\n                });\r\n        });\r\n\r\n    }\r\n\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        return ConnectionFactory.getConnection().then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao)).then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory.getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível obter as negociações')\r\n            })\r\n    }\r\n\r\n    apaga() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n       return this.obterNegociacoes()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                !listaAtual.some(negociacaoExistente =>\r\n                JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            ).catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível buscar negociações para importar')\r\n            })\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n"]}