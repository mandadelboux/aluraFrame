{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAEEC,iB;AAGV,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzBX,wCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACA,oCAAI,CAACf,UAAL,EAAiBA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AACjBd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,YAAY;AAC3B,0CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;AAIH,6BARD;;AAWAI,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBAxBM,CAAP;AAyBH;;;kDAEoBtB,U,EAAW;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEhB,gCAAIvB,WAAWwB,WAAX,CAAuBC,QAAvB,CAAgCC,KAAhC,CAAJ,EAA2C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACC;AACL1B,uCAAW4B,iBAAX,CAA8BF,KAA9B,EAAqC,EAACG,eAAe,IAAhB,EAArC;AACH,yBAND;AAOH;;;sDACuB;AACpB,4BAAI7B,UAAJ,EAAe;AACXC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n    \r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe'\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n     export class ConnectionFactory{\r\n\r\n\r\n        constructor(){\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) =>{\r\n\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result)\r\n                }\r\n                \r\n                openRequest.onsuccess = e => {\r\n                    resolve(e.target.result)\r\n                    if (!connection) connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function () {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    }\r\n                  \r\n                }                \r\n                \r\n\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error)\r\n                    reject(e.target.error.name)\r\n                }\r\n\r\n            })\r\n        }\r\n        \r\n        static _createStores(connection){\r\n\r\n            stores.forEach(store => {\r\n\r\n                    if (connection.objectNames.contains(store)){\r\n                    connection.deleteObjectStore(store)\r\n                    }\r\n                connection.createObjectStore (store, {autoIncrement: true})\r\n            })\r\n        }\r\n        static closeConnection(){\r\n            if (connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n"]}