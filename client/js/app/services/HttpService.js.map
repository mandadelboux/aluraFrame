{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAK;;AAEf,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,+BAAOH,GAAP;AAEH;;;wCAGGI,G,EAAK;AAAA;;AACL,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;;AAKA;;;;;;;;;;;;;;AAiBH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAS,EAAC,gBAAgB,kBAAjB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAIJH,IAJI,CAIC;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBAJD,CAAP;;AAMA;;;;;;;;;;;;;;;AAqBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErrors(res) {\r\n     \r\n        if(!res.ok) throw new Error(res.statusText)\r\n        return res\r\n            \r\n    }\r\n\r\n\r\n    get(url) {\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json())\r\n\r\n\r\n        /*return new Promise((resolve,reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET',url);\r\n            xhr.onreadystatechange = () => {\r\n              if(xhr.readyState == 4) {\r\n                  if(xhr.status == 200) {\r\n  \r\n                    resolve(JSON.parse(xhr.responseText));\r\n                  } else {\r\n                      reject(xhr.responseText);\r\n  \r\n                  }\r\n                }\r\n            };\r\n            xhr.send();\r\n\r\n        });*/\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n            headers: {'Content-type': 'application/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        }).then(res => this._handleErrors(res))\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });*/\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n/*let service = new HttpService();\r\nservice.get('negociacoes/semana').then(negociacoes => ?????? );*/"]}